"use strict";(self.webpackChunkillium_documentation=self.webpackChunkillium_documentation||[]).push([[2526],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||i;return n?r.createElement(f,a(a({ref:t},p),{},{components:n})):r.createElement(f,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6461:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3},a="Consensus Protocol",l={unversionedId:"protocol_spec/consensus",id:"protocol_spec/consensus",title:"Consensus Protocol",description:"The consensus protocol implements the avalanche consensus algorithm.",source:"@site/docs/protocol_spec/consensus.md",sourceDirName:"protocol_spec",slug:"/protocol_spec/consensus",permalink:"/docs/protocol_spec/consensus",draft:!1,editUrl:"https://github.com/project-illium/illium-documentation/docs/protocol_spec/consensus.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"specSidebar",previous:{title:"Libp2p",permalink:"/docs/protocol_spec/libp2p"},next:{title:"Chain Service Protocol",permalink:"/docs/protocol_spec/chain_service"}},s={},c=[{value:"Protocol ID",id:"protocol-id",level:3},{value:"Network Messages",id:"network-messages",level:3},{value:"Protocol",id:"protocol",level:3}],p={toc:c},u="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"consensus-protocol"},"Consensus Protocol"),(0,o.kt)("p",null,"The consensus protocol implements the avalanche consensus algorithm."),(0,o.kt)("h3",{id:"protocol-id"},"Protocol ID"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"/ilx/<network>/consensus/1.0.0\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"<network>")," is either ",(0,o.kt)("inlineCode",{parentName:"p"},"mainnet"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"testnet"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"regtest")," depending on which\nnetwork is being used."),(0,o.kt)("h3",{id:"network-messages"},"Network Messages"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"message MsgAvaRequest {\n    // Random uint32 for request ID\n    uint32 request_ID   = 1;\n    \n    // A list of block IDs\n    repeated bytes invs = 2;\n}\n\nmessage MsgAvaResponse {\n    // Same uint32 found in the request\n    uint32 request_ID = 1;\n    \n    // A list of votes. One vote for block ID in\n    // the request. Votes are 1 byte:\n    //\n    // 0x00: No vote\n    // 0x01: Yes vote\n    // 0x80: Peer doesn't know about the block\n    bytes votes       = 2;\n}\n")),(0,o.kt)("h3",{id:"protocol"},"Protocol"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"When a new block is passed into the consensus engine it is assigned a preference - ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred"),"."),(0,o.kt)("li",{parentName:"ol"},"If a new block conflicts (same height) with another block that is ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred")," the new block preference is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred"),"."),(0,o.kt)("li",{parentName:"ol"},"Once per millisecond the consensus engine select a random peer to query from the validator set, weighted by the percentage of\ntotal stake that validator has, and sends a ",(0,o.kt)("inlineCode",{parentName:"li"},"MsgAvaRequest")," to that peer containing all outstanding inventory."),(0,o.kt)("li",{parentName:"ol"},"We rate limit the number of inflight requests go out at any one time to the number of responses remaining needed to finalized the block.\nIf the next 1 millisecond step occurs before any of the outstanding requests return, the step is skipped."),(0,o.kt)("li",{parentName:"ol"},"When the ",(0,o.kt)("inlineCode",{parentName:"li"},"MsgAvaResponse")," returns the votes are processed. ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"12")," out of the last ",(0,o.kt)("inlineCode",{parentName:"li"},"16")," recorded votes are ",(0,o.kt)("inlineCode",{parentName:"li"},"Yes")," then we consider the vote conclusive."),(0,o.kt)("li",{parentName:"ul"},"If ",(0,o.kt)("inlineCode",{parentName:"li"},"12")," out of the last ",(0,o.kt)("inlineCode",{parentName:"li"},"16")," recorded votes are ",(0,o.kt)("inlineCode",{parentName:"li"},"No")," then we consider the vote conclusive."),(0,o.kt)("li",{parentName:"ul"},"Unknown votes ",(0,o.kt)("inlineCode",{parentName:"li"},"0x80")," ",(0,o.kt)("em",{parentName:"li"},"are")," included in the last 16 votes."),(0,o.kt)("li",{parentName:"ul"},"If the vote is conclusive and it agrees with our current state, either ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred"),", then we\nincrement a confidence counter by 1.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If the confidence counter is >= ",(0,o.kt)("inlineCode",{parentName:"li"},"160")," and the current state is ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred"),", then we mark the block as ",(0,o.kt)("inlineCode",{parentName:"li"},"Finalized")," and\nmark all conflicting blocks as ",(0,o.kt)("inlineCode",{parentName:"li"},"Rejected"),"."),(0,o.kt)("li",{parentName:"ul"},"If the confidence counter is >= ",(0,o.kt)("inlineCode",{parentName:"li"},"160")," and the current state is ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred"),", then we do nothing. Eventually a\nconflicting block will finalize resulting in this one being marked as ",(0,o.kt)("inlineCode",{parentName:"li"},"Rejected"),"."))),(0,o.kt)("li",{parentName:"ul"},"If the vote is conclusive and it does not agree with our current state, either ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred"),", then\nwe flip our current preference and reset our confidence counter to zero. ",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"If the preference flipped from ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"Preferred")," we flip the preference of all conflicting blocks\nto ",(0,o.kt)("inlineCode",{parentName:"li"},"Not Preferred")," and reset their confidence counter to zero.")))))))}d.isMDXComponent=!0}}]);