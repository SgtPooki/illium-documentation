"use strict";(self.webpackChunkillium_documentation=self.webpackChunkillium_documentation||[]).push([[5604],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),c=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},v=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(r),v=o,d=p["".concat(s,".").concat(v)]||p[v]||m[v]||i;return r?n.createElement(d,a(a({ref:t},u),{},{components:r})):n.createElement(d,a({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=v;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}v.displayName="MDXCreateElement"},9892:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var n=r(7462),o=(r(7294),r(3905));const i={sidebar_position:5},a="Lurk",l={unversionedId:"overview/Protocol Overview/lurk",id:"overview/Protocol Overview/lurk",title:"Lurk",description:"In our previous discussion of zk-snarks we hand-waived over all the complexity. Historically, zk-snarks have been",source:"@site/docs/overview/Protocol Overview/lurk.md",sourceDirName:"overview/Protocol Overview",slug:"/overview/Protocol Overview/lurk",permalink:"/docs/overview/Protocol Overview/lurk",draft:!1,editUrl:"https://github.com/project-illium/illium-documentation/docs/overview/Protocol Overview/lurk.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Merkle Trees",permalink:"/docs/overview/Protocol Overview/merkle_trees"},next:{title:"Transaction Validation",permalink:"/docs/overview/Protocol Overview/transaction_validation"}},s={},c=[],u={toc:c},p="wrapper";function m(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"lurk"},"Lurk"),(0,o.kt)("p",null,"In our previous discussion of zk-snarks we hand-waived over all the complexity. Historically, zk-snarks have been\nextremely difficult to work with. The ",(0,o.kt)("inlineCode",{parentName:"p"},"Compile()")," function we mentioned earlier typically requires users to rewrite\ntheir function (called a circuit in zk-snark parlance) in a very low level mathematical representation.\nSomething that isn't easy to do for complex functions."),(0,o.kt)("p",null,'Lurk is a new turing-complete programming language for zk-snarks developed by Lurk Labs that is intended to make\nthe process of creating zk-snarks much easier. Lurk programs are written in a Lisp-like language (called Lurk) and\nexecuted on a "universal circuit" which is designed to be able to create a proof for any lurk program.'),(0,o.kt)("p",null,"An example of a basic lurk program is below:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"(letrec ((next (lambda (a b n target)\n                 (if (eq n target)\n                     a\n                     (next b\n                           (+ a b)\n                           (+ 1 n)\n                           target))))\n         (fib (next 0 1 0)))\n        (fib 1))\n")),(0,o.kt)("p",null,"In Illium we use lurk in two ways:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"To validate transactions"),": The illium protocol defines a lurk program used to prove the validity of all transactions.\nAll transactions contain a single zk-snark proof that is validated using this program."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("strong",{parentName:"li"},"To create custom locking scripts"),": Users can use lurk (or any higher level language that compiles into lurk) to\ncreate a custom locking script. Remember the hash of this script is ultimately included in the user's illium address.")),(0,o.kt)("p",null,"One final point of note, since lurk is built on top of Microsoft's Nova it does ",(0,o.kt)("em",{parentName:"p"},"not")," require a trusted setup like\nprevious generations of zk-snarks. This increases the trust and security of the protocol beyond what was possible with previous\nzk-snark systems."))}m.isMDXComponent=!0}}]);